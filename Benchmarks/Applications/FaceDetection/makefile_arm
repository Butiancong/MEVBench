#Base Makefile
ifeq ($(strip $(OpenCV_ARM_DIR)),)
OpenCV_DIR=$(HOME)/Documents/OpenCV/OpenCV2.3.1ArmInstall
else
OpenCV_DIR=$(OpenCV_ARM_DIR)
endif

ifeq ($(strip $(CROSS_COMPILE)),)
CROSS_COMPILE=arm-none-linux-gnueabi-
endif


#---------PROJECT FILES---------
ASFILES= m5op_arm.S
CPPFILES= 
CCFILES= 
CFILES= 
FILES = $(ASFILES) $(CPPFILES) $(CCFILES) $(CFILES)
EXECUTABLEBASE=FaceDetection
#-------
MAIN= FaceDetection.cpp
HEADERS=
#The include director for openCV
INCDIRSBASE=./ $(OpenCV_DIR)/include
ASFILEXTENSION=.S
CCFILEXTENSION=.cpp
CCFILEXTENSION2=.cc
CFILEXTENSION=.c
AS=$(CROSS_COMPILE)gcc
CC=$(CROSS_COMPILE)g++
C=$(CROSS_COMPILE)gcc
CCDEBUG=-g 
#-p -pg
CDEBUG=-g 
#-p -pg
ASDEBUG=-g
#-p -pg 
CCFLAGS=-c -Wall $(CCDEBUG) -march=armv7-a -mfloat-abi=softfp -O3 $(XTRA_PARAMS)
CFLAGS=-c -Wall $(CDEBUG) -march=armv7-a -mfloat-abi=softfp -O3 $(XTRA_PARAMS)
ASFLAGS=-c -Wall $(ASDEBUG) -march=armv7-a -mfloat-abi=softfp -O3 $(XTRA_PARAMS)
LDEBUG=$(CCDEBUG)
ASDEFINES=
CDEFINES=
CCDEFINES=
LLFLAGSBASE= -Wl,-rpath=$(OpenCV_DIR)/lib -Wall -o
LIBSBASE=pthread rt opencv_calib3d opencv_core opencv_features2d opencv_features2d opencv_flann opencv_highgui opencv_imgproc opencv_ml opencv_objdetect opencv_video opencv_nonfree $(XTRA_LIBS)
#opencv_features2d
#The lib path for the opencv libraries assuming you don't have a native install
LIBPATHS=$(OpenCV_DIR)/lib
HEADERPATH=
BINDIR=./bin/arm
OBJDIR=./obj

#LFLAGS=$(LIBS) $(DEBUG) -m32 -L$(LIBPATH) -Wall -o 
#TESTCASES= ./testcase/*.cc

#############################################################################################
#do not edit below this line
#############################################################################################
INCDIRS=$(addprefix -I,$(INCDIRSBASE))
LIBS=$(addprefix -l,$(LIBSBASE))
LIBPATH=$(addprefix -L,$(LIBPATHS))



BASEOBJECTS=$(basename $(FILES))
BASEOBJECTSPATH=$(addprefix $(OBJDIR)/,$(BASEOBJECTS))
OBJECTS=$(addsuffix .o,$(BASEOBJECTSPATH))


BASEMAINOBJECT=$(basename $(MAIN))
MAINOBJECTPATH=$(addprefix $(OBJDIR)/,$(BASEMAINOBJECT))
MAINOBJECT=$(addsuffix .o,$(MAINOBJECTPATH))

LLFLAGS=$(LIBS) $(LDEBUG) $(LIBPATH) $(LLFLAGSBASE)  

EXECUTABLE=$(BINDIR)/$(EXECUTABLEBASE)

#CFLAGS=$(CCFLAGS)
#LFLAGS=$(LLFLAGS)
#LIB=lib$(LIBRARY)

all: $(EXECUTABLE)
	

nolink: $(OBJECTS)

#compiles the executable which is dependent on the objects
$(EXECUTABLE): $(OBJECTS) $(MAINOBJECT)
	@echo $(OBJECTS)
	@echo "linking files"
	$(CC) $(OBJECTS) $(MAINOBJECT) $(LLFLAGS) $@
	@echo "build finished"


#compiles the objects into executables
$(OBJDIR)/%.o: %$(ASFILEXTENSION)
	@echo "building changed asm files"
	$(AS) $(ASFLAGS) $(ASDEFINES) $(INCDIRS) -o $@ $< 

#compiles the objects into executables
$(OBJDIR)/%.o: %$(CFILEXTENSION)
	@echo "building changed c files"
	$(C) $(CFLAGS) $(CDEFINES) $(INCDIRS) -o$@ $< 
#compiles the objects into executables
$(OBJDIR)/%.o: %$(CCFILEXTENSION)
	@echo "building changed cpp files"
	$(CC) $(CCFLAGS) $(CCDEFINES) $(INCDIRS) -o$@ $<

#compiles the objects into executables
$(OBJDIR)/%.o: %$(CCFILEXTENSION2)
	@echo "building changed cc files"
	$(CC) $(CFLAGS) $(CCDEFINES) $(INCDIRS) -o$@ $<
	
	
.h.o:
	@echo "building changed header files"
	$(CC) $(CFLAGS) $(FILES)

.hpp.o:
	@echo "building changed header files"
	$(CC) $(CFLAGS) $(FILES)


#---------------3rd way------------------

clean:
	rm -f $(OBJDIR)/*.o 
	rm -f $(EXECUTABLE)





