#Base Makefile

#---------PROJECT FILES---------

CPPFILES= HessKnnMatcher.cpp KnnFlannClassification.cpp MatcherResultsClassifier.cpp MultiThreadedMatResult.cpp SparseFeaturePointObjectClassifier.cpp ThreadManager.cpp
CCFILES= 
CFILES= 
FILES = $(CPPFILES) $(CCFILES) $(CFILES)
EXECUTABLEBASE=FeatureClassificationStatic
#-------
MAIN= FeatureClassification.cpp
HEADERS=
#The include director for openCV
INCDIRSBASE=$(OpenCV_STATIC_DIR)/include
CCFILEXTENSION=.cpp
CCFILEXTENSION2=.cc
CFILEXTENSION=.c
CC=g++
C=gcc
CCDEBUG=-g 
CDEBUG=-g 
CCFLAGS=-c $(CCDEBUG) -O3 $(XTRA_PARAMS)
CFLAGS=-c $(CDEBUG) -O3 $(XTRA_PARAMS)
LDEBUG=$(CCDEBUG)
CDEFINES=
CCDEFINES=
LLFLAGSBASE= -static 
LIBSUPPORT_FFMPEG= swscale avdevice avformat avcodec avutil
LIB3PARTY= libjasper libtiff zlib libpng libjpeg unicap  
#v4l2 v4lconvert v4l1 
LIBSBASE= opencv_highgui opencv_ml opencv_objdetect opencv_video opencv_calib3d opencv_flann opencv_features2d opencv_imgproc opencv_nonfree $(XTRA_LIBS) opencv_core $(LIB3PARTY) $(LIBSUPPORT_FFMPEG) rt pthread
#The lib path for the opencv libraries assuming you don't have a native install
LIBPATHS=$(OpenCV_STATIC_DIR)/lib $(OpenCV_STATIC_DIR)/share/OpenCV/3rdparty/lib
HEADERPATH=
BINDIR=./bin
OBJDIR=./obj

#LFLAGS=$(LIBS) $(DEBUG) -m32 -L$(LIBPATH) -Wall -o 
#TESTCASES= ./testcase/*.cc

#############################################################################################
#do not edit below this line
#############################################################################################
INCDIRS=$(addprefix -I,$(INCDIRSBASE))
LIBS=$(addprefix -l,$(LIBSBASE))
LIBPATH=$(addprefix -L,$(LIBPATHS)) 



BASEOBJECTS=$(basename $(FILES))
BASEOBJECTSPATH=$(addprefix $(OBJDIR)/,$(BASEOBJECTS))
OBJECTS=$(addsuffix .o,$(BASEOBJECTSPATH))


BASEMAINOBJECT=$(basename $(MAIN))
MAINOBJECTPATH=$(addprefix $(OBJDIR)/,$(BASEMAINOBJECT))
MAINOBJECT=$(addsuffix .o,$(MAINOBJECTPATH))

#LLFLAGS=$(LIBS) $(LDEBUG) $(LIBPATH) $(LLFLAGSBASE)  
LLFLAGS=$(LLFLAGSBASE) $(LIBPATH) $(LIBS) $(LDEBUG) 

EXECUTABLE=$(BINDIR)/$(EXECUTABLEBASE)

#CFLAGS=$(CCFLAGS)
#LFLAGS=$(LLFLAGS)
#LIB=lib$(LIBRARY)

all: $(EXECUTABLE)
	

nolink: $(OBJECTS)

#compiles the executable which is dependent on the objects
$(EXECUTABLE): $(OBJECTS) $(MAINOBJECT)
	@echo $(OBJECTS)
	@echo "linking files"
	#$(CC) $(OBJECTS) $(MAINOBJECT) $(LLFLAGS) -o $@
	$(CC) -o $@ $(OBJECTS) $(MAINOBJECT) $(LLFLAGS) 
	@echo "build finished"

#compiles the objects into executables
$(OBJDIR)/%.o: %$(CFILEXTENSION)
	@echo "building changed c files"
	$(C) $(CFLAGS) $(CDEFINES) $(INCDIRS) -o $@ $< 
#compiles the objects into executables
$(OBJDIR)/%.o: %$(CCFILEXTENSION)
	@echo "building changed cpp files"
	$(CC) $(CCFLAGS) $(CCDEFINES) $(INCDIRS) -o $@ $<

#compiles the objects into executables
$(OBJDIR)/%.o: %$(CCFILEXTENSION2)
	@echo "building changed cc files"
	$(CC) $(CFLAGS) $(CCDEFINES) $(INCDIRS) -o $@ $<
	
	
.h.o:
	@echo "building changed header files"
	$(CC) $(CFLAGS) $(FILES)

.hpp.o:
	@echo "building changed header files"
	$(CC) $(CFLAGS) $(FILES)


#---------------3rd way------------------

clean:
	rm -f $(OBJDIR)/*.o 
	rm -f $(EXECUTABLE)





